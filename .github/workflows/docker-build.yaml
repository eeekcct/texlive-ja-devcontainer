name: Docker Build Check

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Set metadata
        id: metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: latex
          tags: |
            type=semver,pattern={{raw}}
            type=sha,format=short

      - name: Build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./dockerfiles/texlive/Dockerfile
          push: false
          tags: ${{ steps.metadata.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker

      - name: Check image
        run: |
          cd sample
          docker run --rm -v $(pwd):/latex ${{steps.metadata.outputs.tags}} bash -c \
            "ptex2pdf -u -l -ot '-kanji=utf8 -synctex=1 -interaction=nonstopmode' sample.tex && \
            pbibtex sample && \
            ptex2pdf -u -l -ot '-kanji=utf8 -synctex=1 -interaction=nonstopmode' sample.tex && \
            ptex2pdf -u -l -ot '-kanji=utf8 -synctex=1 -interaction=nonstopmode' sample.tex"

      - name: Upload PDF as artifact
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: pdf-artifact
          path: sample/sample.pdf
  pdf-comparison:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download PDF artifact
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6.0.0
        with:
          name: pdf-artifact
          path: tmp

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Cache Docker layers
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('dockerfiles/pdf-to-image/Dockerfile') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ hashFiles('dockerfiles/pdf-to-image/Dockerfile') }}-

      - name: Build pdf-to-image
        run: make buildx.pdf

      - name: Convert PDF to PNG
        run: |
          docker run --rm -v $(pwd):/pdf pdf bash -c "pdftoppm -png sample/sample.pdf tmp/ref"

          docker run --rm -v $(pwd):/pdf pdf bash -c "pdftoppm -png tmp/sample.pdf tmp/act"

          ls tmp

      - name: Compare PNG
        run: |
          PAGE_COUNT_REF=$(ls tmp/ref-*.png | wc -l)
          PAGE_COUNT_ACT=$(ls tmp/act-*.png | wc -l)

          if [ $PAGE_COUNT_REF -ne $PAGE_COUNT_ACT ]; then
            echo "Error: Page count mismatch $PAGE_COUNT_REF != $PAGE_COUNT_ACT"
            exit 1
          fi

          DIFF_COUNT=0

          for i in $(seq 1 $PAGE_COUNT_REF); do
            docker run --rm -v $(pwd)/tmp:/pdf pdf bash -c "compare -metric RMSE ref-$i.png act-$i.png diff-$i.png 2>&1"

            echo "Page $i: $?"
            if [ $? -ne 0 ]; then
              DIFF_COUNT=$((DIFF_COUNT+1))
            fi
          done

          if [ $DIFF_COUNT -ne 0 ]; then
            echo "Error: $DIFF_COUNT pages are different"
            exit 1
          else
            echo "All pages are the same"
          fi

      - name: Upload diff as artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: diff-artifact
          path: tmp
